{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","key","text","textCopy","writtenText","mistake","countDown","userWordAmount","btnSett","componentDidMount","document","addEventListener","e","setState","shift","countInt","setInterval","clearInterval","length","console","log","componentDidUpdate","alert","addText","fetch","then","res","json","data","text_out","toLowerCase","split","slice","flag","userSettings","target","value","clear","addLetter","arr","push","handleFlag","this","onChange","className","id","loop","Infinity","wrapper","steps","onClick","map","item","type","placeholder","onfocus","spellCheck","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa6e8591.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Typical from \"react-typical\";\nimport \"animate.css/animate.min.css\";\n\nclass App extends React.Component {\n  state = {\n    key: \"\",\n    text: [],\n    textCopy: [],\n    writtenText: [],\n    mistake: 0,\n    countDown: 60,\n    userWordAmount: 10,\n    btnSett: true,\n  };\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", (e) => {\n      const { text, key, textCopy, writtenText } = this.state;\n      this.setState({\n        key: e.key,\n      });\n      if (text[0] === e.key) {\n        text.shift();\n        if (this.state.countDown === 60 || this.state.countDown === -1) {\n          let countDown = 60;\n          const countInt = setInterval(() => {\n            --countDown;\n            this.setState({\n              countDown,\n            });\n\n            if (this.state.countDown <= -1) {\n              clearInterval(countInt);\n              this.setState({\n                writtenText: [],\n                text: [],\n                textCopy: [],\n                userWordAmount: 10,\n                key: \"\",\n                countDown: 60,\n              });\n            } else if (\n              this.state.writtenText.length === this.state.textCopy.length\n            ) {\n              console.log(\"clear\");\n              clearInterval(countInt);\n              this.setState({\n                writtenText: [],\n                text: [],\n                textCopy: [],\n                userWordAmount: 10,\n                key: \"\",\n                countDown: 60,\n              });\n            }\n          }, 1000);\n        } else return;\n      } else if (\n        text[0] !== e.key &&\n        text.length !== 0 &&\n        text.length !== textCopy.length\n      ) {\n        this.setState({\n          mistake: ++this.state.mistake,\n        });\n      }\n    });\n  };\n  componentDidUpdate = () => {\n    const { text, mistake, countDown } = this.state;\n    if (this.state.text.length === 1 && this.state.text[0] === this.state.key) {\n      this.state.writtenText = [];\n      alert(`You Win!!!\n      Mistakes:${this.state.mistake}\n      Time left:${this.state.countDown}`);\n    }\n    if (countDown === 0) {\n      alert(`You lose :(\n        Letters remain: ${text.length}\n        Mistakes: ${mistake}`);\n    }\n  };\n\n  addText = () => {\n    fetch(\n      `https://www.randomtext.me/api/gibberish/h1/${this.state.userWordAmount}`\n    )\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        this.setState({\n          text: data.text_out.toLowerCase().split(\"\").slice(0, -5).slice(4),\n          textCopy: data.text_out.toLowerCase().split(\"\").slice(0, -5).slice(4),\n          mistake: 0,\n        });\n      });\n\n    this.setState({\n      flag: false,\n    });\n  };\n\n  // Define amount of words you want to write\n  userSettings = (e) => {\n    this.setState({\n      userWordAmount: e.target.value,\n    });\n  };\n\n  // Countdown timer\n  countDown = () => {};\n\n  // Clear states\n  clear = () => {\n    if (this.state.text.length === 0) {\n      this.setState({\n        writtenText: [],\n        text: [],\n        textCopy: [],\n        userWordAmount: 10,\n        key: \"\",\n      });\n    }\n  };\n\n  // Add letter to writtenText Array\n  addLetter = () => {\n    let arr = [...this.state.writtenText];\n    const { text, writtenText, textCopy } = this.state;\n\n    if (text.length + 1 + writtenText.length === textCopy.length) {\n      arr.push(textCopy[writtenText.length]);\n\n      this.setState({\n        writtenText: arr,\n      });\n    }\n  };\n\n  handleFlag = () => {\n    this.setState({ btnSett: !this.state.btnSett });\n  };\n\n  render() {\n    const optionsArr = [10, 25, 50];\n    const { text, mistake, key, writtenText, countDown, textCopy } = this.state;\n    return (\n      <div onChange={this.addLetter} className=\"center\">\n        {text.length === 0 || (text.length === 1 && text[0] === key) ? (\n          <p id=\"title\">\n            <Typical\n              loop={Infinity}\n              wrapper=\"b\"\n              steps={[\"Typing game ...\", 3000]}\n            />\n          </p>\n        ) : null}\n\n        <div className=\"App\">\n          {text != 0 ? (\n            <div>\n              <p className=\"textLeft\" id=\"text\">\n                {this.state.btnSett ? textCopy : text}\n              </p>\n              <p className=\"textLeft\" id=\"writtenText\">\n                {this.state.btnSett ? writtenText : null}\n              </p>\n            </div>\n          ) : null}\n\n          <div>\n            {text.length === 0 || (text.length === 1 && text[0] === key) ? (\n              <div className=\"row\">\n                <button onClick={this.addText} id=\"start\">\n                  Start\n                </button>\n                PlayStyle:\n                <button onClick={this.handleFlag}>\n                  {this.state.btnSett ? \"Overwrite\" : \"Deleting\"}\n                </button>\n              </div>\n            ) : null}\n          </div>\n          {text.length === 0 ? (\n            <>\n              <span>Pick amount of words to write on 60 seconds</span>\n              <ul>\n                {optionsArr.map((item) => (\n                  <li>\n                    <button\n                      onClick={() => {\n                        this.setState({ userWordAmount: item });\n                      }}\n                    >\n                      {item}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </>\n          ) : null}\n          <div className=\"mistake\">\n            {text.length !== 0 ? (\n              <p>\n                Mistakes: <span className=\"red\">{mistake}</span>\n              </p>\n            ) : null}\n\n            {text.length !== 0 ? (\n              <p>\n                {countDown}\n                <input\n                  type=\"text\"\n                  placeholder=\"Click HERE and start writing\"\n                  onClick={this.countDown}\n                  onChange={this.clear}\n                  onfocus=\"javascript:this.value=''\"\n                  id=\"myTextArea\"\n                  spellCheck=\"false\"\n                />\n              </p>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}